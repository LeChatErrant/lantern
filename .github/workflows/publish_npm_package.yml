name: Create release and publish package to npm registry

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (example : 3.2.0)"
        required: true
jobs:
  release-npm-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
        # Needs to match the package.json name (@scope/pkg-name)
        scope: '@lechaterrant'

    - name: Bumping package.json
      uses: actions/github-script@v3
      with:
        version: ${{ github.event.inputs.version }}
        script: |
          const fs = require('fs');
          try {
            core.info(`Version : ${version}`);

            const version = core.getInput('version', { required: true });
            const regex = new RegExp('^([0-9]+\.){0,2}([0-9]+)$');
            if (!regex.test(version)) {
              core.setFailed(`${version} is not a valid versionning`);
            }
          
            const package = JSON.parse(fs.readFileSync('./package.json'));
            core.info(`Package.json version : ${package.version}`);
            package.version = version
            fs.writeFileSync('./package.json', JSON.stringify(package, null, 2));
          } catch (err) {
            core.setFailed(err.message);
          }

    - name: Install dependencies and update package-lock.json
      run: npm install

    - name: Push bumped packages
      env:
        VERSION: ${{ github.event.inputs.version }}
      run: |
        git config --global user.name "GitHub Action"
        git config --global use.email "action@github.com"
        git commit --allow-empty -am "Bumping package version to $VERSION"
        git push

    - name: Create github release
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        version: ${{ github.event.inputs.version }}
        script: |
          const fs = require('fs');

          try {
            const { owner, repo } = context.repo;
            core.info(`Identified repository ${owner}/${repo}`);
          
            core.info(`Creating tag ${version}`);
          
            const { data: { sha } } = await github.repos.getCommit({
              owner,
              repo,
              ref: 'refs/heads/master',
              mediaType: {
                format: 'sha'
              },
            });
          
            core.info(sha);
          
            await github.git.createTag({
              owner,
              repo,
              tag: version,
              message: `Release ${version}`,
              object: sha,
              type: 'commit',
            });
          
            core.info(`Creating release ${version}`);

            const res = await github.repos.createRelease({
              owner,
              repo,
              prerelease: false,
              draft: false,
              name: version,
              tag_name: version,
              body: `# ${version}`",
            });
            core.info(JSON.stringify(res));
          } catch (error) {
            core.setFailed(error.message);
          }

    - name: Publish to npm registry
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
